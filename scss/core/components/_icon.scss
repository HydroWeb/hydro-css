////
/// Icon
/// @group core-components
/// @author Benjamin Fleming
////


// Settings
// --------

/// Controls whether styles in this file (icon) are generated.
/// @type Boolean
$hf-generate-icon: $hf-generate !default;

/// The icon module selector
/// @type String
$hf-icon-selector: hf-module('icon') !default;

/// The name of the icon font, if applicable
/// @type String | Boolean
$hf-icon-font: false !default;

/// The path to the icon sprite sheet, if applicable
/// @type String | Boolean
$hf-icon-sprite: false !default;

/// The default size of the icon
/// @type Number
$hf-icon-size: $hf-font-size !default;

/// Map of icons name and value.
/// If the value is a string of length one, that is treated as a font character.
/// If the value is a string of more than length one, that is treated as a image file.
/// If the value is a number or list of numbers, that is treated as a sprite image position.
/// @type Map
$hf-icons: false !default;


// Asserts
// -------

@include hf-assert($hf-generate-icon, 'bool');
@include hf-assert($hf-icon-selector, 'string');
@include hf-assert($hf-icon-font, 'bool' 'string');
@include hf-assert($hf-icon-sprite, 'bool' 'string');
@include hf-assert($hf-icon-size, 'number');
@include hf-assert($hf-icons, 'bool' 'map', 'list' 'string', 'number');


// Mixins
// ------

/// Turns an element into an icon module
/// @require {variable} hf-icon-size
/// @require {variable} hf-icon-font
/// @require {variable} hf-icon-sprite
/// @param {Number} $size [$hf-icon-size]
/// @param {String | Boolean} $font [$hf-icon-font]
/// @param {String | Boolean} $sprite [$hf-icon-sprite]
/// @output
@mixin hf-icon(
	$size: $hf-icon-size,
	$font: $hf-icon-font,
	$sprite: $hf-icon-sprite
) {
	speak: none;
	cursor: inherit;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	display: block;
	width: 1em;
	height: 1em;
	font-size: $size;

	@if $font != false {

		@if type-of($font) == 'string' {
			font-family: '#{$font}';
		}

		font-weight: normal;
		font-style: normal;
		font-variant: normal;
		line-height: 1;
		text-align: center;
		text-transform: none;
		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;

	} @else if $sprite != false {

		@if type-of($sprite) == 'string' {
			background-image: url('#{$sprite}');
		}

	} @else {
		background-position: center;
		background-size: contain;
		background-repeat: no-repeat;
	}
}

/// Adds a specific icon type to an icon module
/// @param {List | String | Number} $value
/// @output
@mixin hf-icon-type($value, $pseudo: 'before') {

	@if type-of($value) == 'string' {

		@if length($value) == 1 {

			@if $pseudo == false {
				content: '#{unquote($value)}';

			} @else if $pseudo == 'before' or $pseudo == 'after' {

				&:#{unquote($pseudo)} {
					content: '#{unquote($value)}';
				}

			} @else {
				@error 'Pseudo selector #{$pseudo} is neither "before", "after" or false';
			}

		} @else {
			background-image: url($value);
		}

	} @else if type-of(nth($value, 1)) == 'number' {
		background-position: $value;
	}
}


// Styles
// ------

@if $hf-generate-icon {

	#{$hf-icon-selector} {
		@include hf-icon;

		display: inline-block;
		vertical-align: top;

		@each $name, $value in $hf-icons {

			@include hf-parameter($name) {
				@include hf-icon-type($value);
			}
		}
	}
}
