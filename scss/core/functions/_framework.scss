////
/// Framework
/// @group core-functions
/// @author Benjamin Fleming
////


// Prefixes
// --------

/// Creates a usable class name from a prefix and a name.
/// @require {variable} hf-prefixes
/// @param {String} $type - The prefix type. The value is retrieved from the $hf-prefixes map.
/// @param {String} $name - The name of the class to be prefixed.
/// @param {Boolean} $as-selector [true] - Whether to return it as a usable selector, or just the name.
/// @return {String} The prefixed class name
@function hf-name($type, $name, $as-selector: true) {
	@return if($as-selector, '.', '') + map-get($hf-prefixes, $type) + $name;
}

/// Creates a hydro selector using the set prefixes and a multidimensional list of names.
/// @require {function} hf-name
/// @param {String | List} $type - If a string, the prefix is retrieved from the `$hf-prefixes` map. If a list (of size
///   2), the first value is treated as a selector string, and the second prefix type. This allows prefixing entire
///   selectors.
/// @param {String | List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list
///   each item of that is prefixed and joined together.
/// @return {String} Selector
@function hf-selector($type, $names) {
	$output: '';
	$comma: '';
	$selector: '';

	// If the type is comprised of a selector and a prefix type, separate them out.
	@if type-of($type) == list {
		$selector: nth($type, 1);
		$type: nth($type, 2);
	}

	// Adds the class name symbol to the prefix.
	$prefix: '.' + map-get($hf-prefixes, $type);

	@each $name in $names {
		$output: $output + $comma;
		$comma: ',';

		@if type-of($name) == list {
			$first: true;
			@each $part in $name {
				@if $part {
					$output: $output
						+ if($first, $selector, '')
						+ hf-name($type, $part);
					$first: false;
				}
			}
		} @elseif $name {
			$output: $output
				+ $selector
				+ hf-name($type, $name);
		}
	}

	@return $output;
}

/// Creates a module class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the module.
/// @return {String} The module class name
@function hf-module($name) {
	@return hf-name('module', $name);
}

/// Creates a utility class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the utility.
/// @return {String} The utility class name
@function hf-utility($name) {
	@return hf-name('utility', $name);
}

/// Creates a parameter class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the parameter.
/// @return {String} The parameter class name
@function hf-parameter($name) {
	@return hf-name('parameter', $name);
}

/// Creates a state class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the state.
/// @return {String} The state class name
@function hf-state($name) {
	@return hf-name('state', $name);
}

/// Creates a feature class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the feature.
/// @return {String} The feature class name
@function hf-feature($name) {
	@return hf-name('feature', $name);
}

/// Creates a featureless class name.
/// @require {function} hf-name
/// @param {String} $name - The name of the feature.
/// @return {String} The featureless class name
@function hf-featureless($name) {
	@return hf-name('featureless', $name);
}


// Maps
// ----

/// Gets a sizes value. Just a readable wrapper for `map-get()` on `$hf-sizes`.
/// @require {variable} $hf-sizes
/// @param {String} $type - The size type
/// @return {Number}
@function hf-size($type) {
	@return map-get($hf-sizes, $type);
}

/// Gets a breakpoints value. Just a readable wrapper for `map-get()` on `$hf-breakpoints`.
/// @require {variable} $hf-breakpoints
/// @param {String} $type - The breakpoint type
/// @return {Number}
@function hf-breakpoint($type) {
	@return map-get($hf-breakpoints, $type);
}

/// Gets a gutters value. Just a readable wrapper for `map-get()` on `$hf-gutters`.
/// @require {variable} $hf-gutters
/// @param {String} $type - The gutter type
/// @return {Number}
@function hf-gutter($type) {
	@return map-get($hf-gutters, $type);
}

/// Gets a divisions value. Just a readable wrapper for `map-get()` on `$hf-divisions`.
/// @require {variable} $hf-divisions
/// @param {String} $type - The division type
/// @return {Number}
@function hf-division($type) {
	@return map-get($hf-divisions, $type);
}
