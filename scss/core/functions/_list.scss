////
/// List functions
/// @group core-functions
/// @author Benjamin Fleming
////


// Public
// ------

/// Returns the value from a shorthand CSS list associated with the key.
/// @param {List | Map} $list
/// @param {String} $key - Valid keys: top, topleft, right, topright, bottom, bottomright, left, bottomleft
/// @return {*}
@function hf-shorthand($list, $key) {
	$length: length($list);
	$index: 1;

	@if $length == 0 {
		@error 'Cannot return #{inspect($key)} item from an empty list';
	}

	@if $key == right or $key == topright {

		@if $length >= 2 {
			$index: 2;
		}

	} @else if $key == bottom or $key == bottomright {

		@if $length >= 3 {
			$index: 3;
		}

	} @else if $key == left or $key == bottomleft {

		@if $length >= 2 {
			$index: 2;

		} @else if $length >= 4 {
			$index: 4;
		}

	} @else if $key != top and $key != topleft {
		@error '#{inspect($key)} is neither top/topleft, right/topright, bottom/bottomright or left/bottomleft';
	}

	@return nth($list, $index);
}

/// Flatten a multi-dimensional list into a single dimension list.
/// @param {*} $list
/// @param {String} $separator [auto]
/// @return {List}
@function hf-flatten($list, $separator: auto) {
	$type: type-of($list);

	@if $type != 'list' and $type != 'arglist' {
		@return $list;
	}

	$flattened: ();
	$separator: if($separator == auto, list-separator($list), $separator);

	@if $separator != 'comma' and $separator != 'space' {
		@error '#{inspect($separator)} is not a valid separator';
	}

	@each $item in $list {
		$flattened: join($flattened, hf-flatten($item), $separator);
	}

	@return $flattened;
}

/// Insertion sort for sorting comparison-based values.
/// @param {List | Map} $list
/// @param {String} $direction [asc]
/// @param {String} $separator [auto]
/// @param {Boolean} $keys [false] - When sorting a map, whether to sort by it's keys (or it's values)
/// @return {List | Map}
@function hf-sort($list, $direction: 'asc', $separator: auto, $keys: false) {
	$sort-keys: $keys;
	$type: type-of($list);
	$keys: null;
	$values: null;
	$is-map: ($type == 'map' or $type == 'argmap');

	@if $is-map {
		$keys: map-keys($list);
		$values: map-values($list);
		$list: if($sort-keys, $keys, $values);
		$type: 'list';
	}

	@if $type != 'list' and $type != 'arglist' {
		@error '#{inspect($list)} is not a list';
	}

	@if $direction != 'asc' and $direction != 'desc' {
		@error '#{inspect($direction)} is not a valid direction';
	}

	$length: length($list);

	@if $length < 2 {
		@return $list;
	}

	$ascending: ($direction == 'asc');

	@for $i from 2 through $length {
		$x: nth($list, $i);
		$k: null;
		$j: $i;
		$condition: true;

		@if $is-map {
			$k: if($sort-keys, nth($values, $i), nth($keys, $i));
		}

		@while $condition {
			$y: nth($list, $j - 1);

			@if not comparable($x, $y) {
				@error '#{inspect($x)} and #{inspect($y)} are incomparable values';
			}

			$condition: if($ascending, ($y > $x), ($y < $x));

			@if $condition {
				$list: set-nth($list, $j, nth($list, $j - 1));

				@if $is-map {
					$keys: set-nth($keys, $j, nth($keys, $j - 1));
					$values: set-nth($values, $j, nth($values, $j - 1));
				}

				$j: $j - 1;
				$condition: ($j > 1);
			}
		}

		$list: set-nth($list, $j, $x);

		@if $is-map {
			$values: set-nth($values, $j, $k);
			$keys: set-nth($keys, $j, $k);
		}
	}

	@if $is-map {
		$map: ();

		@for $i from 1 through length($keys) {
			$item: nth($list, $i);
			$key: if($sort-keys, $item, nth($keys, $i));
			$value: if($sort-keys, nth($values, $i), $item);
			$map: map-merge($map, ($key: $value));
		}

		@return $map;
	}

	@return $list;
}


// Non-prefixed
// ------------

/// Returns the "top" value of a list. Useful to extract individual side values from CSS short-hand lists like paddings.
/// @require {function} hf-shorthand
/// @param {List | Map} $list
/// @return {*}
@function top($list) {
	@return hf-shorthand($list, top);
}

/// Returns the "right" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-shorthand
/// @param {List | Map} $list
/// @return {*}
@function right($list) {
	@return hf-shorthand($list, right);
}

/// Returns the "bottom" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-shorthand
/// @param {List | Map} $list
/// @return {*}
@function bottom($list) {
	@return hf-shorthand($list, bottom);
}

/// Returns the "left" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-shorthand
/// @param {List | Map} $list
/// @return {*}
@function left($list) {
	@return hf-shorthand($list, left);
}
