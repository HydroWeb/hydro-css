////
/// List functions
/// @group functions
/// @author Benjamin Fleming
////


// Public
// ------

/// Returns the value at an index on a list or map. If the index is outside the bounds of the list or map it is 'looped'
/// around. Essentially the list or map is treated like a circular buffer.
/// @param {List | Map} $list
/// @param {Number} $index
/// @return {*}
@function hf-nth-loop($list, $index) {
	// Ruby's implementation of modulo does not result in negatives, so there's no need to check for negative values.
	@return nth($list, ($index - 1) % length($list) + 1);
}

/// Flatten a multi-dimensional list into a single dimension list.
/// @param {*} $list
/// @param {String} $separator [auto]
/// @return {List}
@function hf-flatten($list, $separator: auto) {
	$type: type-of($list);

	@if $type != 'list' and $type != 'arglist' {
		@return $list;
	}

	$flattened: ();
	$separator: if($separator == auto, list-separator($list), $separator);

	@if $separator != 'comma' and $separator != 'space' {
		@error '#{$separator} is not a valid separator';
	}

	@each $item in $list {
		$flattened: join($flattened, hf-flatten($item), $separator);
	}

	@return $flattened;
}

/// Insertion sort for sorting comparison-based values.
/// @param {List} $list
/// @param {String} $direction [asc]
/// @param {String} $separator [auto]
/// @return {List}
@function hf-sort($list, $direction: 'asc', $separator: auto) {
	$type: type-of($list);

	@if $type != 'list' and $type != 'arglist' {
		@error '#{$list} is not a list';
	}

	@if $direction != 'asc' and $direction != 'desc' {
		@error '#{$direction} is not a valid direction';
	}

	$length: length($list);

	@if $length < 2 {
		@return $list;
	}

	$ascending: ($direction == 'asc');

	@for $i from 2 through $length {
		$x: nth($list, $i);
		$j: $i;
		$condition: true;

		@while $condition {
			$y: nth($list, $j - 1);

			@if not comparable($x, $y) {
				@error '#{$x} and #{$y} are incomparable values';
			}

			$condition: if($ascending, ($y > $x), ($y < $x));

			@if $condition {
				$list: set-nth($list, $j, nth($list, $j - 1));
				$j: $j - 1;
				$condition: ($j > 1);
			}
		}

		$list: set-nth($list, $j, $x);
	}

	@return $list;
}


// Non-prefixed
// ------------

/// Returns the "top" value of a list. Useful to extract individual side values from CSS short-hand lists like paddings.
/// @require {function} hf-nth-loop
/// @param {List | Map} $list
/// @return {*}
@function top($list) {
	@return hf-nth-loop($list, 1);
}

/// Returns the "right" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-nth-loop
/// @param {List | Map} $list
/// @return {*}
@function right($list) {
	@return hf-nth-loop($list, 2);
}

/// Returns the "bottom" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-nth-loop
/// @param {List | Map} $list
/// @return {*}
@function bottom($list) {
	@return hf-nth-loop($list, 3);
}

/// Returns the "left" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} hf-nth-loop
/// @param {List | Map} $list
/// @return {*}
@function left($list) {
	@return hf-nth-loop($list, 4);
}