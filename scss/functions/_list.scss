// Sides
// =====

@function top($list)
{
	@if type-of($list) == list
	{
		@return nth($list, 1);
	}

	@return $list;
}

@function right($list)
{
	@if type-of($list) == list
	{
		@if length($list) > 1 { @return nth($list, 2); }
		@return nth($list, 1);
	}

	@return $list;
}

@function bottom($list)
{
	@if type-of($list) == list
	{
		@if length($list) > 2 { @return nth($list, 3); }
		@return nth($list, 1);
	}

	@return $list;
}

@function left($list)
{
	@if type-of($list) == list
	{
		@if length($list) > 3 { @return nth($list, 4); }
		@if length($list) > 1 { @return nth($list, 2); }
		@return nth($list, 1);
	}

	@return $list;
}


// Transforming
// ============

@function scale-list($list, $scale)
{
	@if type-of($list) == list
	{
		$new-list: ();

		@each $item in $list
		{
			$new-item: $item;

			@if type-of($item) == number
			{
				$new-item: $item * $scale;
			}

			$new-list: append($new-list, $new-item, space);
		}

		@return $new-list;
	}
	@elseif type-of($list) == number
	{
		@return $list * $scale;
	}

	@return $list;
}


// Sorting
// =======

// Insertion sort for sorting comparison-based values
@function sort($list/*TODO , $dir: asc | desc */)
{
	@if type-of($list) == list
	{
		$len: length($list);

		@if $len < 2
		{
			@return $list;
		}

		@for $i from 2 through $len
		{
			$x: nth($list, $i);
			$j: $i;

			@while $j > 1 and nth($list, $j - 1) > $x
			{
				$list: set-nth($list, $j, nth($list, $j - 1));
				$j: $j - 1;
			}

			$list: set-nth($list, $j, $x);
		}
	}

	@return $list;
}