////
/// Media queries
/// @group utilities
/// @author Benjamin Fleming
////


// Mixins
// ------

/// Simple media query abstraction for expressive and maintainable media queries.
/// @require {variable} hf-breakpoints
/// @require {variable} -hf-default-font-size
/// @require {function} hf-convert
/// @param {String} $device [all]
/// @param {Number | List | String} $from [null]
/// @param {Number | List | String} $until [null]
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin hf-media($device: all, $from: null, $until: null, $property: width) {
	$valid-devices: all aural braille handheld print projection screen tty tv embossed;
	$valid-properties: width device-width height device-height aspect-ratio device-aspect-ratio resolution;

	@if not index($valid-devices, $device) {
		@warn '#{$device} is not a valid device; media query will never match';
	}

	@if not index($valid-properties, $property) {
		@warn '#{$property} is not a valid property; media query will never match';
	}

	$query: $device;
	$is-ratio: ($property == aspect-ratio or $property == device-aspect-ratio);

	$prior: 0;

	@each $dir, $value in ('min': $from, 'max': $until) {
		$type: type-of($value);

		@if $type != 'null' {
			$query: $query + ' and (' + $dir + '-' + $property + ':';

			@if $type == 'string' {
				@if map-has-key($hf-breakpoints, $value) {
					$value: map-get($hf-breakpoints, $value);
					$type: type-of($value);
				} @else {
					@error '#{$value} is not a valid value';
				}
			}

			@if $type == 'number' and not $is-ratio {

				$value: hf-convert($value, em, $-hf-default-font-size);

				@if $value < $prior {
					@if $dir == 'min' {
						@warn 'From value (#{$value}) is negative; media query will never match';
					} @else {
						@warn 'Difference between from and util is negative; media query will never match';
					}
				}

				// Maximum values should not be inclusive, so subtract a tiny amount to make sure they won't match
				@if $dir == 'max' {
					$value: $value - 0.01em;
				}

				$query: $query + $value;
				$prior: $value;

			} @else if $type == 'list' and $is-ratio {

				@if length($value) != 2 {
					@error '#{$value} is not a valid ratio list';
				}

				@each $dim in $value {
					@if type-of($dim) != 'number' or not unitless($dim) {
						@error '#{$dim} is not a valid ratio list value';
					}
				}

				$ratio-x: nth($value, 1);
				$ratio-y: nth($value, 2);
				$ratio: ($ratio-x / $ratio-y);

				@if $ratio < $prior {
					@if $dir == 'min' {
						@warn 'From value (#{$value}) is negative; media query will never match';
					} @else {
						@warn 'Difference between from and util is negative; media query will never match';
					}
				}

				$query: $query + $ratio-x + '/' + $ratio-y;
				$prior: $ratio;

			} @else {
				@error '#{$value} is not a ' + if($is-ratio, 'ratio list', 'number');
			}

			$query: $query + ')';
		}
	}

	@media #{$query} {
		@content;
	}
}

/// Media query from a minimum value
/// @require {mixin} hf-media
/// @param {Number | List | String} $value
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin hf-from($value, $property: width) {
	@include hf-media($from: $value, $property: $property) {
		@content;
	}
}

/// Media query to a maximum value
/// @require {mixin} hf-media
/// @param {Number | List | String} $value
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin hf-until($value, $property: width) {
	@include hf-media($until: $value, $property: $property) {
		@content;
	}
}

/// Media query only at a certain breakpoint label
/// @require {mixin} hf-media
/// @require {variable} hf-breakpoints
/// @param {String} $value
/// @param {String} $direction [from]
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin hf-breakpoint($breakpoint, $direction: 'from', $property: width) {

	@if not map-has-key($hf-breakpoints, $breakpoint) {
		@error '#{$breakpoint} is not a valid breakpoint name';
	}

	@if $direction != 'from' and $direction != 'until' {
		@error '#{$direction} is not a valid direction';
	}

	$is-from: ($direction == 'from');

	$start: map-get($hf-breakpoints, $breakpoint);
	$end: null;

	@each $bp-name, $bp-value in $hf-breakpoints {

		@if $is-from {

			@if $bp-value > $start and ($end == null or $bp-value < $end) {
				$end: $bp-value;
			}

		} @else {

			@if $bp-value < $start and ($end == null or $bp-value > $end) {
				$end: $bp-value;
			}
		}
	}

	@include hf-media(
		$from:  if($is-from, $start, $end),
		$until: if($is-from, $end, $start),
		$property: $property
	) {
		@content;
	}
}

/// Shorthand media queries to be used within selectors
/// @require {mixin} hf-media
/// @require {function} hf-sort
/// @require {variable} hf-breakpoints
/// @param {Map} $map
/// @param {String} $property [width]
/// @param {String} $direction [from]
/// @output Set of media queries containing the properties passed
/// @example sass
///   @include hf-responsive((
///       400px: (font-size: 1em, color: black),
///       tab: (font-size: 2em, color: red),
///       dsk: (font-size: 3em)
///   ));
@mixin hf-responsive($map, $property: width, $direction: from) {

	// Find the map-based breakpoints and apply them explicitly
	@each $break, $properties in $map {
		$type: type-of($break);

		@if $type == 'string' {

			@if map-has-key($hf-breakpoints, $break) {
				// Swap out the labelled breakpoint for the real thing
				$label: $break;
				$break: map-get($hf-breakpoints, $label);
				$map: map-remove($map, $label);

				// If the map contains a breakpoint that exists already (explicitly stated), then
				// merge with priority the properties from that set into the map-specified properties.
				@if map-has-key($map, $break) {
					$properties: map-merge($properties, map-get($map, $break));
				}

				// Set the explicit breakpoint as a key on the original values
				$map: map-merge($map, ($break: $properties));

			} @else {
				@error '#{$break} is not a valid breakpoint name';
			}
		} @else if $type != 'number' {
			@error '#{$break} is not a number or valid breakpoint name';
		}
	}

	// Sort breakpoints in ascending order
	// This is so that cascading styles are correctly applied
	$breaks: hf-sort( map_keys($map) );

	// Apply the styles
	@each $break in $breaks {
		$properties: map-get($map, $break);
		$from: null;
		$until: null;

		@if $direction == 'from' {
			$from: $break;
		} @else if $direction == 'until' {
			$until: $break;
		} @else {
			@error '#{$direction} is not a valid direction'
		}

		@include hf-media($from: $from, $until: $until, $property: $property) {

			@each $prop, $val in $properties {
				#{$prop}: $val;
			}
		}
	}
}
