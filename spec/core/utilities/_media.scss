@include test-module('Core / Utilities / Media') {
	$-hf-default-font-size: 16px;
	$hf-breakpoints: (
		'mobl':    0px,
		'tabl':  640px,
		'desk': 1080px
	);

	@include test('Media [mixin]') {

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media all {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media(screen, 400px, null, width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media screen and (min-width: 25em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media(tv, null, 400px, width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media tv and (max-width: 24.99em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media(print, 50em, 100em, height) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media print and (min-width: 50em) and (max-width: 99.99em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media(all, 'tabl', 'desk', height) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media print and (min-width: 40em) and (max-width: 112.99em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query based on it\'s parameters') {
			@include input {
				@include hf-media(handheld, (3,4), (16,9), aspect-ratio) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media handheld and (min-aspect-ratio: 3/4) and (max-aspect-ratio: 16/9) {
					.content {
						display: block;
					}
				}
			}
		}
	}

	@include test('Breakpoint [mixin]') {

		@include assert('Outputs a media query targeting a specific breakpoint name.') {
			@include input {
				@include hf-breakpoint('desk', 'from', width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media all and (min-width: 113em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query targeting a specific breakpoint name.') {
			@include input {
				@include hf-breakpoint('desk', 'until', width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media all and (min-width: 40em) and (max-width: 112.99em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query targeting a specific breakpoint name.') {
			@include input {
				@include hf-breakpoint('tabl', 'from', width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media all and (min-width: 40em) and (max-width: 112.99em) {
					.content {
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a media query targeting a specific breakpoint name.') {
			@include input {
				@include hf-breakpoint('mobl', 'from', width) {
					.content {
						display: block;
					}
				}
			}
			@include expect {
				@media all and (max-width: 39.99em) {
					.content {
						display: block;
					}
				}
			}
		}
	}

	@include test('Responsive [mixin]') {

		@include assert('Outputs a list of media queries with the associated properties.') {
			@include input {
				.content {
					@include hf-responsive((
						'mobl': (order: 1),
						'tabl': (order: 2),
						'desk': (order: 3)
					), width, 'from');
				}
			}
			@include expect {
				.content {
					order: 1;
				}
				@media all and (min-width: 40em) {
					.content {
						order: 2;
					}
				}
				@media all and (min-width: 113em) {
					.content {
						order: 3;
					}
				}
			}
		}

		@include assert('Outputs a list of media queries with the associated properties.') {
			@include input {
				.content {
					@include hf-responsive((
						'desk': (order: 1),
						'mobl': (order: 2),
						'tabl': (order: 3)
					), width, 'from');
				}
			}
			@include expect {
				.content {
					order: 1;
				}
				@media all and (min-width: 40em) {
					.content {
						order: 2;
					}
				}
				@media all and (min-width: 113em) {
					.content {
						order: 3;
					}
				}
			}
		}

		@include assert('Outputs a list of media queries with the associated properties.') {
			@include input {
				.content {
					@include hf-responsive((
						'desk': (order: 1, display: block),
						500px: (order: 2)
					), width, 'from');
				}
			}
			@include expect {
				@media all and (min-width: 31.25em) {
					.content {
						order: 2;
					}
				}
				@media all and (min-width: 113em) {
					.content {
						order: 1;
						display: block;
					}
				}
			}
		}

		@include assert('Outputs a list of media queries with the associated properties.') {
			@include input {
				.content {
					@include hf-responsive((
						'desk': (order: 1),
						'tabl': (order: 2)
					), height, 'until');
				}
			}
			@include expect {
				@media all and (max-height: 39.99em) {
					.content {
						order: 2;
					}
				}
				@media all and (max-height: 112.99em) {
					.content {
						order: 1;
					}
				}
			}
		}
	}
}
